{"version":3,"file":"index.cjs","sources":["../src/SwitchSelector.styled.ts","../src/SwitchSelector.tsx","../src/defaultColors.ts"],"sourcesContent":["import {createElement} from \"react\";\nimport {setup, styled} from \"goober\";\nimport {shouldForwardProp} from \"goober/should-forward-prop\";\nimport CSS from \"csstype\";\n\nconst propToOmitInDom = [\n    \"fontSize\",\n    \"fontColor\",\n    \"selectedFontColor\",\n    \"optionsAmount\",\n    \"optionBorderRadius\",\n    \"isRawText\",\n    \"selectedIndex\",\n    \"border\",\n    \"backgroundColor\",\n    \"selectedBackgroundColor\",\n    \"wrapperBorderRadius\",\n    \"selectionIndicatorMargin\",\n    \"disabled\"\n];\n\nsetup(\n    createElement,\n    undefined,\n    undefined,\n    shouldForwardProp((prop) => !propToOmitInDom.includes(prop))\n);\n\nexport type StylingPropsTypes = {\n    border: string | number;\n    backgroundColor: string;\n    selectedBackgroundColor: string;\n    wrapperBorderRadius: number | CSS.Property.BorderRadius<string>;\n    optionBorderRadius: number | CSS.Property.BorderRadius<string>;\n    fontSize: number;\n    fontColor: string;\n    selectedFontColor: string;\n    selectionIndicatorMargin: number;\n};\n\ninterface SwitchSelectorWrapperPropTypes\n    extends Pick<\n        StylingPropsTypes,\n        | \"border\"\n        | \"backgroundColor\"\n        | \"selectedBackgroundColor\"\n        | \"wrapperBorderRadius\"\n        | \"optionBorderRadius\"\n        | \"selectionIndicatorMargin\"\n    > {\n    selectedIndex: number;\n    optionsAmount: number;\n    disabled: boolean;\n}\n\nexport const SwitchSelectorWrapper = styled(\"div\")<SwitchSelectorWrapperPropTypes>`\n    display: flex;\n    border-radius: ${({wrapperBorderRadius}) =>\n        typeof wrapperBorderRadius === \"number\" ? `${wrapperBorderRadius}px` : wrapperBorderRadius};\n    border: ${(props) => props.border};\n    background: ${(props) => props.backgroundColor};\n    width: 100%;\n    height: 100%;\n    position: relative;\n    opacity: ${(props) => (props.disabled ? 0.7 : 1)};\n    overflow: hidden;\n\n    &::before {\n        top: 50%;\n        left: ${(props) => (props.selectedIndex / props.optionsAmount) * 100}%;\n        content: \"\";\n        position: absolute;\n        height: calc(100% - ${(props) => 2 * props.selectionIndicatorMargin}px);\n        width: calc(\n            ${(props) => (1 / props.optionsAmount) * 100}%${\" - \"}${(props) =>\n                    2 * props.selectionIndicatorMargin}px\n        );\n        border-radius: ${({optionBorderRadius}) =>\n            typeof optionBorderRadius === \"number\"\n                ? `${optionBorderRadius}px`\n                : optionBorderRadius};\n        border: ${(props) => props.selectionIndicatorMargin}px solid\n            ${(props) => props.backgroundColor};\n        background: ${(props) => props.selectedBackgroundColor};\n        transition: left 0.1s linear, background 0.1s linear;\n        transform: translateY(-50%);\n        z-index: 1;\n        box-sizing: content-box;\n    }\n`;\n\ninterface OptionItemPropsTypes extends Pick<StylingPropsTypes, \"optionBorderRadius\"> {\n    optionsAmount: number;\n}\n\nexport const OptionItem = styled(\"div\")<OptionItemPropsTypes>`\n    display: flex;\n    align-items: center;\n    height: 100%;\n    width: ${(props) => (1 / props.optionsAmount) * 100}%;\n    border-radius: ${({optionBorderRadius}) =>\n        typeof optionBorderRadius === \"number\" ? `${optionBorderRadius}px` : optionBorderRadius};\n`;\n\ninterface OptionItemLabelPropsTypes\n    extends Partial<Pick<StylingPropsTypes, \"fontSize\" | \"fontColor\" | \"selectedFontColor\">> {\n    isRawText: boolean;\n    selected: boolean;\n    disabled: boolean;\n}\n\nexport const OptionItemLabel = styled(\"label\")<OptionItemLabelPropsTypes>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n    transition: color 0.1s linear;\n    cursor: ${(props) => (props.disabled ? \"not-allowed\" : \"pointer\")};\n    font-size: ${(props) => (props.isRawText ? props.fontSize + \"px\" : \"unset\")};\n    color: ${(props) =>\n        props.isRawText ? (props.selected ? props.selectedFontColor : props.fontColor) : \"unset\"};\n`;\n\nexport const OptionInput = styled(\"input\")`\n    width: 0;\n    height: 0;\n    opacity: 0;\n    z-index: -1;\n    position: absolute;\n    pointer-events: none;\n`;\n","import React, {FC, useState, useEffect} from \"react\";\nimport {\n    SwitchSelectorWrapper,\n    OptionItem,\n    OptionItemLabel,\n    OptionInput\n} from \"./SwitchSelector.styled\";\nimport {SwitchSelectorProps} from \"./SwitchSelector.props\";\nimport {defaultColors} from \"./defaultColors\";\n\nconst CLASS_NAMES_PREFIX = \"react-switch-selector\";\n\nconst SwitchSelector: FC<SwitchSelectorProps> = (props) => {\n    const {onChange = (): void => {}, options = [], initialSelectedIndex = 0} = props;\n    const canApplyInitialSelectedIndex = !!options[initialSelectedIndex];\n    const [selectedIndex, setSelectedIndex] = useState(\n        canApplyInitialSelectedIndex ? initialSelectedIndex : 0\n    );\n\n    const {\n        border = 0,\n        backgroundColor = defaultColors.backgroundColor,\n        selectedBackgroundColor = defaultColors.selectedBackgroundColor,\n        wrapperBorderRadius = 20,\n        optionBorderRadius = 18,\n        fontSize = 14,\n        fontColor = defaultColors.fontColor,\n        selectedFontColor = defaultColors.selectedFontColor,\n        selectionIndicatorMargin = 2,\n        forcedSelectedIndex,\n        disabled = false,\n        name\n    } = props;\n\n    useEffect(() => {\n        if (\n            forcedSelectedIndex !== undefined &&\n            !!options[forcedSelectedIndex] &&\n            forcedSelectedIndex !== selectedIndex\n        ) {\n            setSelectedIndex(forcedSelectedIndex);\n        }\n    }, [forcedSelectedIndex, options, selectedIndex]);\n\n    const handleOnClick = (index: number): void => {\n        if (!disabled && index !== selectedIndex) {\n            setSelectedIndex(index);\n            onChange(options[index].value);\n        }\n    };\n\n    const renderOptions = (): React.ReactElement[] => {\n        return options.map((option, index) => {\n            const isSelected = selectedIndex === index;\n            const optionId = `${name ?? \"rss\"}-option-${index}`;\n            const isRawText = typeof option.label === \"string\";\n\n            const labelRawTextProps = {\n                fontSize,\n                fontColor: option.fontColor || fontColor,\n                selectedFontColor: option.selectedFontColor || selectedFontColor\n            };\n\n            return (\n                <OptionItem\n                    key={optionId}\n                    optionsAmount={options.length}\n                    className={`${CLASS_NAMES_PREFIX}-option ${CLASS_NAMES_PREFIX}-option-${\n                        isSelected ? \"selected\" : \"unselected\"\n                    }`}\n                    optionBorderRadius={optionBorderRadius}\n                >\n                    <OptionItemLabel\n                        className={`${CLASS_NAMES_PREFIX}-option-label`}\n                        selected={isSelected}\n                        isRawText={isRawText}\n                        disabled={disabled}\n                        aria-disabled={disabled}\n                        htmlFor={optionId}\n                        {...(isRawText ? labelRawTextProps : {})}\n                    >\n                        <OptionInput\n                            type=\"radio\"\n                            id={optionId}\n                            name={name}\n                            onChange={(): void => handleOnClick(index)}\n                            checked={isSelected}\n                            aria-checked={isSelected}\n                            tabIndex={isSelected ? 0 : -1}\n                        />\n                        {option.label}\n                    </OptionItemLabel>\n                </OptionItem>\n            );\n        });\n    };\n\n    if (!options.length) return null;\n    return (\n        <SwitchSelectorWrapper\n            selectedIndex={selectedIndex}\n            optionsAmount={options.length}\n            className={`${CLASS_NAMES_PREFIX}-wrapper ${\n                disabled ? `${CLASS_NAMES_PREFIX}-disabled` : \"\"\n            }`}\n            border={border}\n            backgroundColor={backgroundColor}\n            selectedBackgroundColor={\n                options[selectedIndex]?.selectedBackgroundColor || selectedBackgroundColor\n            }\n            wrapperBorderRadius={wrapperBorderRadius}\n            optionBorderRadius={optionBorderRadius}\n            selectionIndicatorMargin={selectionIndicatorMargin}\n            disabled={disabled}\n            role={\"radiogroup\"}\n            aria-labelledby={name}\n        >\n            {renderOptions()}\n        </SwitchSelectorWrapper>\n    );\n};\n\nexport default SwitchSelector;\n","export const defaultColors = {\n    backgroundColor: \"#ecf0f1\",\n    selectedBackgroundColor: \"#2ecc71\",\n    fontColor: \"#000\",\n    selectedFontColor: \"#fff\"\n};\n"],"names":["propToOmitInDom","setup","createElement","undefined","shouldForwardProp","prop","includes","SwitchSelectorWrapper","styled","wrapperBorderRadius","props","border","backgroundColor","disabled","selectedIndex","optionsAmount","selectionIndicatorMargin","optionBorderRadius","selectedBackgroundColor","OptionItem","OptionItemLabel","isRawText","fontSize","selected","selectedFontColor","fontColor","OptionInput","onChange","options","initialSelectedIndex","useState","setSelectedIndex","forcedSelectedIndex","name","useEffect","length","React","className","CLASS_NAMES_PREFIX","role","map","option","index","isSelected","optionId","label","key","htmlFor","type","id","value","handleOnClick","checked","tabIndex"],"mappings":"6bAKA,IAAMA,EAAkB,CACpB,WACA,YACA,oBACA,gBACA,qBACA,YACA,gBACA,SACA,kBACA,0BACA,sBACA,2BACA,YAGJC,QACIC,qBACAC,OACAA,EACAC,oBAAkB,SAACC,UAAUL,EAAgBM,SAASD,UA8B7CE,EAAwBC,SAAO,MAAPA,uqBAEhB,gBAAEC,IAAAA,0BACgB,iBAAxBA,EAAsCA,OAA0BA,GACjE,SAACC,UAAUA,EAAMC,QACb,SAACD,UAAUA,EAAME,iBAIpB,SAACF,UAAWA,EAAMG,SAAW,GAAM,GAKlC,SAACH,UAAWA,EAAMI,cAAgBJ,EAAMK,cAAiB,KAG3C,SAACL,YAAcA,EAAMM,0BAErC,SAACN,YAAeA,EAAMK,cAAiB,KAAO,MAAQ,SAACL,YAC7CA,EAAMM,0BAEL,gBAAEC,IAAAA,yBACe,iBAAvBA,EACEA,OACHA,GACA,SAACP,UAAUA,EAAMM,0BACrB,SAACN,UAAUA,EAAME,iBACT,SAACF,UAAUA,EAAMQ,0BAY1BC,EAAaX,SAAO,MAAPA,8HAIb,SAACE,YAAeA,EAAMK,cAAiB,KAC/B,gBAAEE,IAAAA,yBACe,iBAAvBA,EAAqCA,OAAyBA,IAUhEG,EAAkBZ,SAAO,QAAPA,gPAQjB,SAACE,UAAWA,EAAMG,SAAW,cAAgB,WAC1C,SAACH,UAAWA,EAAMW,UAAYX,EAAMY,SAAW,KAAO,SAC1D,SAACZ,UACNA,EAAMW,UAAaX,EAAMa,SAAWb,EAAMc,kBAAoBd,EAAMe,UAAa,UAG5EC,EAAclB,SAAO,QAAPA,wJCjHqB,SAACE,WAC+BA,EAArEiB,SAAAA,aAAW,iBAA0DjB,EAA1CkB,QAAAA,aAAU,OAAgClB,EAA5BmB,qBAAAA,aAAuB,MAE7BC,WADHF,EAAQC,GAEZA,EAAuB,GADnDf,OAAeiB,SAiBlBrB,EAZAC,OAAAA,aAAS,MAYTD,EAXAE,gBAAAA,aCpBa,cD+BbF,EAVAQ,wBAAAA,aCpBqB,cD8BrBR,EATAD,oBAAAA,aAAsB,OAStBC,EARAO,mBAAAA,aAAqB,OAQrBP,EAPAY,SAAAA,aAAW,OAOXZ,EANAe,UAAAA,aCvBO,WD6BPf,EALAc,kBAAAA,aCvBe,WD4Bfd,EAJAM,yBAAAA,aAA2B,IAC3BgB,EAGAtB,EAHAsB,sBAGAtB,EAFAG,SAAAA,gBACAoB,EACAvB,EADAuB,KAkEJ,OA/DAC,YAAU,gBAEsB/B,IAAxB6B,GACEJ,EAAQI,IACVA,IAAwBlB,GAExBiB,EAAiBC,IAEtB,CAACA,EAAqBJ,EAASd,IAuD7Bc,EAAQO,OAETC,wBAAC7B,GACGO,cAAeA,EACfC,cAAea,EAAQO,OACvBE,UAAcC,kCACVzB,EAAcyB,iCAAgC,IAElD3B,OAAQA,EACRC,gBAAiBA,EACjBM,kCACIU,EAAQd,aAAgBI,0BAA2BA,EAEvDT,oBAAqBA,EACrBQ,mBAAoBA,EACpBD,yBAA0BA,EAC1BH,SAAUA,EACV0B,KAAM,+BACWN,GA/DdL,EAAQY,IAAI,SAACC,EAAQC,GACxB,IAAMC,EAAa7B,IAAkB4B,EAC/BE,SAAcX,EAAAA,EAAQ,kBAAgBS,EACtCrB,EAAoC,iBAAjBoB,EAAOI,MAQhC,OACIT,wBAACjB,GACG2B,IAAKF,EACL7B,cAAea,EAAQO,OACvBE,UAAcC,8DACVK,EAAa,WAAa,cAE9B1B,mBAAoBA,GAEpBmB,wBAAChB,KACGiB,UAAcC,qCACdf,SAAUoB,EACVtB,UAAWA,EACXR,SAAUA,kBACKA,EACfkC,QAASH,GACJvB,EAtBS,CACtBC,SAAAA,EACAG,UAAWgB,EAAOhB,WAAaA,EAC/BD,kBAAmBiB,EAAOjB,mBAAqBA,GAmBF,IAErCY,wBAACV,GACGsB,KAAK,QACLC,GAAIL,EACJX,KAAMA,EACNN,SAAU,kBAzCZ,SAACe,GACd7B,GAAY6B,IAAU5B,IACvBiB,EAAiBW,GACjBf,EAASC,EAAQc,GAAOQ,QAsCcC,CAAcT,IACpCU,QAAST,iBACKA,EACdU,SAAUV,EAAa,GAAK,IAE/BF,EAAOI"}