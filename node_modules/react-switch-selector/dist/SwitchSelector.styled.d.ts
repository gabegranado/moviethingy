/// <reference types="react" />
import CSS from "csstype";
export declare type StylingPropsTypes = {
    border: string | number;
    backgroundColor: string;
    selectedBackgroundColor: string;
    wrapperBorderRadius: number | CSS.Property.BorderRadius<string>;
    optionBorderRadius: number | CSS.Property.BorderRadius<string>;
    fontSize: number;
    fontColor: string;
    selectedFontColor: string;
    selectionIndicatorMargin: number;
};
interface SwitchSelectorWrapperPropTypes extends Pick<StylingPropsTypes, "border" | "backgroundColor" | "selectedBackgroundColor" | "wrapperBorderRadius" | "optionBorderRadius" | "selectionIndicatorMargin"> {
    selectedIndex: number;
    optionsAmount: number;
    disabled: boolean;
}
export declare const SwitchSelectorWrapper: import("goober").StyledVNode<Omit<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & import("goober").DefaultTheme & SwitchSelectorWrapperPropTypes, never>>;
interface OptionItemPropsTypes extends Pick<StylingPropsTypes, "optionBorderRadius"> {
    optionsAmount: number;
}
export declare const OptionItem: import("goober").StyledVNode<Omit<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & import("goober").DefaultTheme & OptionItemPropsTypes, never>>;
interface OptionItemLabelPropsTypes extends Partial<Pick<StylingPropsTypes, "fontSize" | "fontColor" | "selectedFontColor">> {
    isRawText: boolean;
    selected: boolean;
    disabled: boolean;
}
export declare const OptionItemLabel: import("goober").StyledVNode<Omit<import("react").ClassAttributes<HTMLLabelElement> & import("react").LabelHTMLAttributes<HTMLLabelElement> & import("goober").DefaultTheme & OptionItemLabelPropsTypes, never>>;
export declare const OptionInput: import("goober").StyledVNode<Omit<import("react").ClassAttributes<HTMLInputElement> & import("react").InputHTMLAttributes<HTMLInputElement> & import("goober").DefaultTheme & {
    as?: any;
}, never>>;
export {};
